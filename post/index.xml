<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on chenjiuling - 在阅读中遇见自己</title><link>https://chenjiuling.github.io/post/</link><description>Recent content in Posts on chenjiuling - 在阅读中遇见自己</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 07 Jan 2022 22:11:54 +0800</lastBuildDate><atom:link href="https://chenjiuling.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Markdown语法</title><link>https://chenjiuling.github.io/post/markdown%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 07 Jan 2022 22:11:54 +0800</pubDate><guid>https://chenjiuling.github.io/post/markdown%E8%AF%AD%E6%B3%95/</guid><description>&lt;h3 id="段落和换行">段落和换行&lt;/h3>
&lt;p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。&lt;/p>
&lt;p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 ``标签。&lt;/p></description></item><item><title>ConstrainLayout用法集合</title><link>https://chenjiuling.github.io/post/constrainlayout%E7%94%A8%E6%B3%95%E9%9B%86%E5%90%88/</link><pubDate>Thu, 06 Jan 2022 20:53:24 +0800</pubDate><guid>https://chenjiuling.github.io/post/constrainlayout%E7%94%A8%E6%B3%95%E9%9B%86%E5%90%88/</guid><description>&lt;h2 id="一布局的使用">一.布局的使用&lt;/h2>
&lt;h4 id="11-位置约束">1.1 位置约束&lt;/h4>
&lt;blockquote>
&lt;p>ConstraintLayout采用方向约束的方式对控件进行定位，至少要保证水平和垂直方向都至少有一个约束才能确定控件的位置&lt;/p>
&lt;/blockquote>
&lt;h5 id="111-基本方向约束">1.1.1 基本方向约束&lt;/h5></description></item><item><title>Android系统架构杂谈</title><link>https://chenjiuling.github.io/post/android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%9D%82%E8%B0%88/</link><pubDate>Tue, 04 Jan 2022 22:11:54 +0800</pubDate><guid>https://chenjiuling.github.io/post/android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%9D%82%E8%B0%88/</guid><description>&lt;p>Android系统构架是安卓系统的体系结构，android的系统架构和其操作系统一样，采用了分层的架构，共分为四层，从高到低分别是Android应用层，Android应用框架层，Android系统运行库层和Linux内核层。&lt;/p>
&lt;p>Android系统构架主要应用于ARM平台，但不仅限于ARM，通过编译控制，在X86、MAC等体系结构的机器上同样可以运行。&lt;/p></description></item><item><title>如何通过hugo和github快速创建个人博客</title><link>https://chenjiuling.github.io/post/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%92%8Cgithub%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 01 Jan 2022 14:11:54 +0800</pubDate><guid>https://chenjiuling.github.io/post/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E5%92%8Cgithub%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h3 id="安装hugo">安装Hugo&lt;/h3>
&lt;h4 id="1-二进制安装推荐简单快速">1. 二进制安装（推荐：简单、快速）&lt;/h4>
&lt;p>到 &lt;a href="https://github.com/spf13/hugo/releases">Hugo Releases&lt;/a> 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）&lt;/p>
&lt;p>Mac下直接使用 &lt;code>Homebrew&lt;/code> 安装：&lt;/p></description></item><item><title>安卓开发应用架构之界面层</title><link>https://chenjiuling.github.io/post/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E4%B9%8B%E7%95%8C%E9%9D%A2%E5%B1%82/</link><pubDate>Sat, 01 Jan 2022 14:11:54 +0800</pubDate><guid>https://chenjiuling.github.io/post/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E4%B9%8B%E7%95%8C%E9%9D%A2%E5%B1%82/</guid><description>&lt;p>界面的作用是在屏幕上显示应用数据，并充当主要的用户互动点。每当数据发生变化时，无论是因为用户互动（例如按了某个按钮），还是因为外部输入（例如网络响应），界面都应随之更新，以反映这些变化。实际上，界面是从数据层获取的应用状态的直观呈现。&lt;/p>
&lt;p>不过，从数据层获取的应用数据的格式通常不同于您需要显示的信息的格式。例如，您可能只需要在界面中显示部分数据，或者可能需要合并两个不同的数据源，以便提供切合用户需求的信息。无论您应用的是什么逻辑，都需要向界面传递完全呈现界面所需的所有信息。界面层是一个流水线，负责将应用数据变化转换为界面可以呈现的形式，然后将其显示出来。&lt;/p></description></item><item><title>安卓开发应用架构指南</title><link>https://chenjiuling.github.io/post/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%8C%87%E5%8D%97/</link><pubDate>Sat, 01 Jan 2022 14:11:54 +0800</pubDate><guid>https://chenjiuling.github.io/post/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%8C%87%E5%8D%97/</guid><description>&lt;h2 id="常见的架构原则">常见的架构原则&lt;/h2>
&lt;p>如果您不应使用应用组件存储应用数据和状态，那么您应该改为如何设计应用呢？&lt;/p>
&lt;p>随着 Android 应用大小不断增加，您定义的架构务必要能允许应用扩缩、提升应用的稳健性并且方便对应用进行测试。&lt;/p>
&lt;p>应用架构定义了应用的各个部分之间的界限以及每个部分应承担的职责。为了满足上述需求，您应该按照某些特定原则设计应用架构。&lt;/p>
&lt;h4 id="分离关注点">分离关注点&lt;/h4>
&lt;p>要遵循的最重要的原则是分离关注点。 一种常见的错误是在一个 &lt;code>Activity&lt;/code> 或 &lt;code>Fragment&lt;/code> 中编写所有代码。这些基于界面的类应仅包含处理界面和操作系统交互的逻辑。您应使这些类尽可能保持精简，这样可以避免许多与组件生命周期相关的问题，并提高这些类的可测试性。&lt;/p></description></item></channel></rss>